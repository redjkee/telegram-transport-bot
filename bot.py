# bot.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø 3.0)

import os
import logging
import pandas as pd
import io
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ConversationHandler
)
from telegram.error import BadRequest
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from parser import process_excel_file

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)

user_data = {}

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ (ConversationHandler) ---
(
    ASK_CAR_STATS, ASK_DRIVER_STATS,
    ASK_CAR_EXPORT, ASK_DRIVER_EXPORT
) = range(4)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='main_stats')],
        [InlineKeyboardButton("üöó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Å. –Ω–æ–º–µ—Ä—É", callback_data='main_ask_car_stats')],
        [InlineKeyboardButton("üë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∞–º–∏–ª–∏–∏", callback_data='main_ask_driver_stats')],
        [InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data='main_export_menu')],
        [InlineKeyboardButton("üèÜ –¢–æ–ø-5", callback_data='main_top')],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='main_clear')],
    ])

def get_export_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data='export_full')],
        [InlineKeyboardButton("üöó –ü–æ –≥–æ—Å. –Ω–æ–º–µ—Ä—É", callback_data='export_ask_car')],
        [InlineKeyboardButton("üë§ –ü–æ —Ñ–∞–º–∏–ª–∏–∏", callback_data='export_ask_driver')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')],
    ])

cancel_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel_conversation')]])
back_to_main_menu_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main_menu')]])

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    user_id = update.effective_user.id
    welcome_text = "üëã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if user_id in user_data and not user_data[user_id].empty:
        welcome_text += f"\n\n‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(user_data[user_id])}."
    
    await update.message.reply_text(welcome_text, reply_markup=get_main_menu_keyboard(), parse_mode='Markdown')
    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    welcome_text = "üëã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if user_id in user_data and not user_data[user_id].empty:
        welcome_text += f"\n\n‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(user_data[user_id])}."
    
    await query.edit_message_text(welcome_text, reply_markup=get_main_menu_keyboard(), parse_mode='Markdown')

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---

async def handle_main_menu_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏, –Ω–µ —Ç—Ä–µ–±—É—é—â–∏–µ –¥–∏–∞–ª–æ–≥–∞."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    command = query.data.split('_')[1] # 'main_stats' -> 'stats'

    has_data = user_id in user_data and not user_data[user_id].empty

    if command == 'stats':
        if not has_data: return await query.edit_message_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=back_to_main_menu_keyboard)
        df = user_data[user_id]
        message = (f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
                   f"‚ñ´Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {df['–ò—Å—Ç–æ—á–Ω–∏–∫'].nunique()}\n"
                   f"‚ñ´Ô∏è –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(df)}\n"
                   f"‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum():,.2f} —Ä—É–±.*\n"
                   f"‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω: {df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].nunique()}\n"
                   f"‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {df['–í–æ–¥–∏—Ç–µ–ª—å'].nunique()}")
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=back_to_main_menu_keyboard)

    elif command == 'top':
        if not has_data: return await query.edit_message_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=back_to_main_menu_keyboard)
        df = user_data[user_id]
        top_drivers = df.groupby('–í–æ–¥–∏—Ç–µ–ª—å')['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum().nlargest(5)
        top_drivers_text = "".join([f"{i}. {d} - {t:,.0f} —Ä—É–±.\n" for i, (d, t) in enumerate(top_drivers.items(), 1)])
        top_cars = df.groupby('–ì–æ—Å_–Ω–æ–º–µ—Ä')['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum().nlargest(5)
        top_cars_text = "".join([f"{i}. –ù–æ–º–µ—Ä {c} - {t:,.0f} —Ä—É–±.\n" for i, (c, t) in enumerate(top_cars.items(), 1)])
        message = (f"üèÜ *–¢–æ–ø-5 –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É*\n\n"
                   f"üë§ *–õ—É—á—à–∏–µ –≤–æ–¥–∏—Ç–µ–ª–∏:*\n{top_drivers_text or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
                   f"üöó *–°–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã:*\n{top_cars_text or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        await query.edit_message_text(message, parse_mode='Markdown', reply_markup=back_to_main_menu_keyboard)

    elif command == 'clear':
        if has_data:
            del user_data[user_id]
            await query.edit_message_text("üóëÔ∏è –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=back_to_main_menu_keyboard)
        else:
            await query.edit_message_text("‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.", reply_markup=back_to_main_menu_keyboard)
            
    elif command == 'export_menu':
        await query.edit_message_text("üì• **–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:", reply_markup=get_export_menu_keyboard(), parse_mode='Markdown')

# --- –õ–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ (ConversationHandler) ---

# –®–∞–≥ 1: –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ "—Å–ø—Ä–∞—à–∏–≤–∞—é—Ç" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞–Ω–Ω—ã–µ
async def ask_for_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action = query.data.split('_', 1)[1] # 'main_ask_car_stats' -> 'ask_car_stats'
    
    if action == 'ask_car_stats':
        await query.edit_message_text("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 3 —Ü–∏—Ñ—Ä—ã –≥–æ—Å. –Ω–æ–º–µ—Ä–∞:", reply_markup=cancel_keyboard)
        return ASK_CAR_STATS
    elif action == 'ask_driver_stats':
        await query.edit_message_text("üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è:", reply_markup=cancel_keyboard)
        return ASK_DRIVER_STATS
    elif action == 'ask_car': # for export
        await query.edit_message_text("üî¢ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞:", reply_markup=cancel_keyboard)
        return ASK_CAR_EXPORT
    elif action == 'ask_driver': # for export
        await query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞:", reply_markup=cancel_keyboard)
        return ASK_DRIVER_EXPORT

# –®–∞–≥ 2: –§—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç" –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_car_stats_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_id = update.effective_user.id
    df = user_data.get(user_id)
    
    if df is None or df.empty:
        await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=back_to_main_menu_keyboard)
        return ConversationHandler.END

    car_df = df[df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].astype(str).str.contains(user_input, case=False, na=False)]
    if car_df.empty:
        await update.message.reply_text(f"‚ùå –ú–∞—à–∏–Ω–∞ —Å –Ω–æ–º–µ—Ä–æ–º '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=back_to_main_menu_keyboard)
        return ConversationHandler.END
        
    total_trips = len(car_df)
    total_earnings = car_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
    drivers = ", ".join(car_df['–í–æ–¥–∏—Ç–µ–ª—å'].unique())
    message = (f"üöó *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—à–∏–Ω–µ {user_input}*\n\n"
               f"‚ñ´Ô∏è –°–æ–≤–µ—Ä—à–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_trips}\n"
               f"‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{total_earnings:,.2f} —Ä—É–±.*\n"
               f"‚ñ´Ô∏è –í–æ–¥–∏—Ç–µ–ª–∏: {drivers}")
    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=back_to_main_menu_keyboard)
    return ConversationHandler.END

async def handle_driver_stats_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_id = update.effective_user.id
    df = user_data.get(user_id)
    
    if df is None or df.empty:
        await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=back_to_main_menu_keyboard)
        return ConversationHandler.END

    driver_df = df[df['–í–æ–¥–∏—Ç–µ–ª—å'].str.contains(user_input, case=False, na=False)]
    if driver_df.empty:
        await update.message.reply_text(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_main_menu_keyboard)
        return ConversationHandler.END
        
    total_trips = len(driver_df)
    total_earnings = driver_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
    cars = ", ".join(driver_df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].unique())
    message = (f"üë§ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é {user_input}*\n\n"
               f"‚ñ´Ô∏è –°–æ–≤–µ—Ä—à–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_trips}\n"
               f"‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{total_earnings:,.2f} —Ä—É–±.*\n"
               f"‚ñ´Ô∏è –ú–∞—à–∏–Ω—ã: {cars}")
    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=back_to_main_menu_keyboard)
    return ConversationHandler.END

# --- –õ–æ–≥–∏–∫–∞ –≠–∫—Å–ø–æ—Ä—Ç–∞ ---

async def handle_export_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    command = query.data.split('_')[1] # 'export_full' -> 'full'
    
    df = user_data.get(user_id)
    if df is None or df.empty:
        return await query.edit_message_text("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=back_to_main_menu_keyboard)
        
    if command == 'full':
        await send_excel_report(df, query.message.chat_id, context, "–ø–æ–ª–Ω—ã–π_–æ—Ç—á–µ—Ç.xlsx")

async def handle_car_export_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_id = update.effective_user.id
    df = user_data.get(user_id)
    if df is None or df.empty:
        await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=back_to_main_menu_keyboard)
        return ConversationHandler.END
        
    car_df = df[df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].astype(str).str.contains(user_input, case=False, na=False)]
    if car_df.empty:
        await update.message.reply_text(f"‚ùå –ú–∞—à–∏–Ω–∞ '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=back_to_main_menu_keyboard)
        return ConversationHandler.END

    await send_excel_report(car_df, update.message.chat_id, context, f"–æ—Ç—á–µ—Ç_–º–∞—à–∏–Ω–∞_{user_input}.xlsx")
    return ConversationHandler.END

async def handle_driver_export_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_id = update.effective_user.id
    df = user_data.get(user_id)
    if df is None or df.empty:
        await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=back_to_main_menu_keyboard)
        return ConversationHandler.END

    driver_df = df[df['–í–æ–¥–∏—Ç–µ–ª—å'].str.contains(user_input, case=False, na=False)]
    if driver_df.empty:
        await update.message.reply_text(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å '{user_input}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=back_to_main_menu_keyboard)
        return ConversationHandler.END

    await send_excel_report(driver_df, update.message.chat_id, context, f"–æ—Ç—á–µ—Ç_–≤–æ–¥–∏—Ç–µ–ª—å_{user_input}.xlsx")
    return ConversationHandler.END

async def send_excel_report(df: pd.DataFrame, chat_id: int, context: ContextTypes.DEFAULT_TYPE, filename: str):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ Excel —Ñ–∞–π–ª–∞."""
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='–û—Ç—á–µ—Ç')
        worksheet = writer.sheets['–û—Ç—á–µ—Ç']
        for idx, col in enumerate(df):
            max_len = max(df[col].astype(str).map(len).max(), len(str(df[col].name))) + 1
            worksheet.set_column(idx, idx, max_len)
    output.seek(0)
    await context.bot.send_document(chat_id=chat_id, document=output, filename=filename,
                                    caption='üìä –í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤.')

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    welcome_text = "üëã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ:"
    if user_id in user_data and not user_data[user_id].empty:
        welcome_text += f"\n\n‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(user_data[user_id])}."
    
    await query.edit_message_text(welcome_text, reply_markup=get_main_menu_keyboard(), parse_mode='Markdown')
    return ConversationHandler.END

# --- –ü—Ä–æ—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    file = await update.message.document.get_file()
    file_name = update.message.document.file_name
    if not file_name.lower().endswith('.xlsx'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return
    await update.message.reply_text(f"‚è≥ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{file_name}'. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    file_content = await file.download_as_bytearray()
    new_df = process_excel_file(bytes(file_content), file_name)
    if new_df is None or new_df.empty:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}'.")
        return
    if user_id in user_data:
        user_data[user_id] = pd.concat([user_data[user_id], new_df], ignore_index=True)
    else:
        user_data[user_id] = new_df
    
    message_text = (f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(new_df)}\n"
                    f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(user_data[user_id])}\n\n"
                    "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?")
    await update.message.reply_text(message_text, reply_markup=post_upload_keyboard)

class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/favicon.ico':
            self.send_response(204)
            self.end_headers()
            return
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write(b"Bot is alive")
    def do_HEAD(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
    def log_message(self, format, *args):
        return

def run_health_check_server():
    port = int(os.environ.get("PORT", 8080))
    server_address = ('', port)
    httpd = HTTPServer(server_address, HealthCheckHandler)
    httpd.serve_forever()

if __name__ == '__main__':
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    if not TOKEN: raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
    application = ApplicationBuilder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(ask_for_input, pattern='^main_ask_car_stats$'),
            CallbackQueryHandler(ask_for_input, pattern='^main_ask_driver_stats$'),
            CallbackQueryHandler(ask_for_input, pattern='^export_ask_car$'),
            CallbackQueryHandler(ask_for_input, pattern='^export_ask_driver$'),
        ],
        states={
            ASK_CAR_STATS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_car_stats_input)],
            ASK_DRIVER_STATS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_driver_stats_input)],
            ASK_CAR_EXPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_car_export_input)],
            ASK_DRIVER_EXPORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_driver_export_input)],
        },
        fallbacks=[
            CommandHandler('start', start),
            CallbackQueryHandler(cancel_conversation, pattern='^cancel_conversation$')
        ],
        per_user=True,
    )
    
    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler)
    
    application.add_handler(CallbackQueryHandler(handle_main_menu_buttons, pattern='^main_'))
    application.add_handler(CallbackQueryHandler(handle_export_buttons, pattern='^export_full$'))
    application.add_handler(CallbackQueryHandler(back_to_main_menu, pattern='^back_to_main_menu$'))
    
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    threading.Thread(target=run_health_check_server, daemon=True).start()
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ (v3.0)...")
    application.run_polling()
