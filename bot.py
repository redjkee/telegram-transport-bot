import os
import logging
import pandas as pd
import io
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, 
    ContextTypes, 
    CommandHandler, 
    MessageHandler, 
    filters,
    CallbackQueryHandler
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –µ–µ –ª–æ–≤–∏—Ç—å
from telegram.error import BadRequest
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
from parser import process_excel_file

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)

user_data = {}

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ ---
back_keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')]])

# –ù–û–í–ò–ù–ö–ê: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
post_upload_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("üìä –û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ", callback_data='summary_car')],
    [InlineKeyboardButton("üë§ –û—Ç—á–µ—Ç –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", callback_data='summary_driver')],
    [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')]
])

def get_main_menu(user_id):
    welcome_text = (
        "üëã **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel-—Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    )
    if user_id in user_data and not user_data[user_id].empty:
        welcome_text += f"\n\n‚ÑπÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(user_data[user_id])}."
    
    keyboard = [
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("üèÜ –¢–æ–ø-5", callback_data='top'), InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data='export')],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='clear')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    return welcome_text, reply_markup

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text, markup = get_main_menu(user_id)
    await update.message.reply_text(text, reply_markup=markup, parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    command = query.data

    try:
        if command == 'back_to_menu':
            text, markup = get_main_menu(user_id)
            await query.edit_message_text(text, reply_markup=markup, parse_mode='Markdown')
            return

        has_data = user_id in user_data and not user_data[user_id].empty

        # --- –ù–û–í–ò–ù–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–≤–æ–¥–∫–∏ ---
        if command == 'summary_car' or command == 'summary_driver':
            if not has_data:
                await query.edit_message_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", reply_markup=back_keyboard)
                return
            
            df = user_data[user_id]
            group_by_col = '–ì–æ—Å_–Ω–æ–º–µ—Ä' if command == 'summary_car' else '–í–æ–¥–∏—Ç–µ–ª—å'
            title = "üöó –°–≤–æ–¥–∫–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º" if command == 'summary_car' else "üë§ –°–≤–æ–¥–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º"
            
            summary = df.groupby(group_by_col)['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum().sort_values(ascending=False)
            
            summary_text = f"**{title}**\n\n"
            if summary.empty:
                summary_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            else:
                for item, total in summary.items():
                    summary_text += f"‚ñ´Ô∏è {item}: *{total:,.0f} —Ä—É–±.*\n"
            
            await query.edit_message_text(summary_text, parse_mode='Markdown', reply_markup=back_keyboard)
        
        # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        elif command == 'stats':
            # ...
        
        elif command == 'export':
             # ...
             
    except BadRequest as e:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –õ–æ–≤–∏–º –æ—à–∏–±–∫—É "Message is not modified" –∏ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–µ
        if "Message is not modified" in str(e):
            logging.info("Ignoring 'Message is not modified' error.")
        else:
            logging.error(f"An unexpected BadRequest error occurred: {e}")
    except Exception as e:
        logging.error(f"An error occurred in button_callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=back_keyboard)


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞)
    file = await update.message.document.get_file()
    # ...
    new_df = process_excel_file(bytes(file_content), file_name)
    # ...
    
    # –ù–û–í–ò–ù–ö–ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    message_text = (
        f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(new_df)}\n"
        f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(user_data[user_id])}\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?"
    )
    await update.message.reply_text(message_text, reply_markup=post_upload_keyboard)

# ... –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (car_stats, driver_stats, handle_document –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
async def car_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data or user_data[user_id].empty:
        await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–æ–º–µ—Ä.\n–ü—Ä–∏–º–µ—Ä: `/car 123`", parse_mode='Markdown')
        return
    car_number = context.args[0]
    df = user_data[user_id]
    car_df = df[df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].astype(str).str.contains(car_number, case=False, na=False)]
    if car_df.empty:
        await update.message.reply_text(f"‚ùå –ú–∞—à–∏–Ω–∞ —Å –≥–æ—Å–Ω–æ–º–µ—Ä–æ–º '{car_number}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    total_trips = len(car_df)
    total_earnings = car_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
    drivers = ", ".join(car_df['–í–æ–¥–∏—Ç–µ–ª—å'].unique())
    message = (f"üöó *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—à–∏–Ω–µ {car_number}*\n\n‚ñ´Ô∏è –°–æ–≤–µ—Ä—à–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_trips}\n‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{total_earnings:,.2f} —Ä—É–±.*\n‚ñ´Ô∏è –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞ —ç—Ç–æ–π –º–∞—à–∏–Ω–µ: {drivers}")
    await update.message.reply_text(message, parse_mode='Markdown')

async def driver_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data or user_data[user_id].empty:
        await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è **–û—à–∏–±–∫–∞:** –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ñ–∞–º–∏–ª–∏—é.\n–ü—Ä–∏–º–µ—Ä: `/driver –ò–≤–∞–Ω–æ–≤`", parse_mode='Markdown')
        return
    driver_name = context.args[0]
    df = user_data[user_id]
    driver_df = df[df['–í–æ–¥–∏—Ç–µ–ª—å'].str.contains(driver_name, case=False, na=False)]
    if driver_df.empty:
        await update.message.reply_text(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å —Ñ–∞–º–∏–ª–∏–µ–π '{driver_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    total_trips = len(driver_df)
    total_earnings = driver_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
    cars = ", ".join(driver_df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].unique())
    message = (f"üë§ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é {driver_name}*\n\n‚ñ´Ô∏è –°–æ–≤–µ—Ä—à–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_trips}\n‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{total_earnings:,.2f} —Ä—É–±.*\n‚ñ´Ô∏è –†–∞–±–æ—Ç–∞–ª(–∞) –Ω–∞ –º–∞—à–∏–Ω–∞—Ö: {cars}")
    await update.message.reply_text(message, parse_mode='Markdown')

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    file = await update.message.document.get_file()
    file_name = update.message.document.file_name
    if not file_name.lower().endswith('.xlsx'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return
    await update.message.reply_text(f"‚è≥ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{file_name}'. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    file_content = await file.download_as_bytearray()
    new_df = process_excel_file(bytes(file_content), file_name)
    if new_df is None or new_df.empty:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}'.")
        return
    if user_id in user_data: user_data[user_id] = pd.concat([user_data[user_id], new_df], ignore_index=True)
    else: user_data[user_id] = new_df
    await update.message.reply_text(f"‚úÖ –§–∞–π–ª '{file_name}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(new_df)}\n–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(user_data[user_id])}")

class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self): self.send_response(200); self.send_header("Content-type", "text/plain"); self.end_headers(); self.wfile.write(b"Bot is alive")
def run_health_check_server():
    port = int(os.environ.get("PORT", 8080)); httpd = HTTPServer(('', port), HealthCheckHandler); httpd.serve_forever()

if __name__ == '__main__':
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    if not TOKEN: raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('car', car_stats))
    application.add_handler(CommandHandler('driver', driver_stats))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    threading.Thread(target=run_health_check_server, daemon=True).start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ...")
    application.run_polling()
