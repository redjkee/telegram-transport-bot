from aiogram.filters import Command
from aiogram.types import Message
import asyncio

async def generate_report(message: Message, data, title):
    if not data:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return
    
    stats = calculate_statistics(data)
    
    # –û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
    car_reports = []
    for car_plate, car_data in stats['car_stats'].items():
        drivers = ', '.join(car_data['drivers'])
        files = ', '.join(list(car_data['files'])[:3])
        if len(car_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(car_data['files']) - 3})"
        
        car_reports.append(f"üöó {car_plate}\n"
                         f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {car_data['trips_count']}\n"
                         f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: {drivers}\n"
                         f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                         f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {car_data['total_amount']:,.0f} —Ä—É–±.")
    
    # –û—Ç—á–µ—Ç –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
    driver_stats = {}
    for item in data:
        driver = item['–í–æ–¥–∏—Ç–µ–ª—å']
        if driver not in driver_stats:
            driver_stats[driver] = {
                'total_amount': 0,
                'trips_count': 0,
                'cars': set(),
                'files': set()
            }
        driver_stats[driver]['total_amount'] += item['–°—Ç–æ–∏–º–æ—Å—Ç—å']
        driver_stats[driver]['trips_count'] += 1
        driver_stats[driver]['cars'].add(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'])
        driver_stats[driver]['files'].add(item['–§–∞–π–ª'])
    
    driver_reports = []
    for driver, driver_data in driver_stats.items():
        if driver == "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            continue
        cars = ', '.join(driver_data['cars'])
        files = ', '.join(list(driver_data['files'])[:3])
        if len(driver_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(driver_data['files']) - 3})"
        
        driver_reports.append(f"üë§ {driver}\n"
                            f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {driver_data['trips_count']}\n"
                            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏: {cars}\n"
                            f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {driver_data['total_amount']:,.0f} —Ä—É–±.")
    
    response = f"""
üìä {title}

–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['unique_files']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {stats['total_trips']}
‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {stats['unique_cars']}  
‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π: {stats['unique_drivers']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} —Ä—É–±.

–ü–û –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú:
{chr(10).join(car_reports)}

–ü–û –í–û–î–ò–¢–ï–õ–Ø–ú:
{chr(10).join(driver_reports)}

‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!
    """
    
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
            await asyncio.sleep(0.5)
    else:
        await message.answer(response)

@dp.message(Command("start"))
async def start_handler(message: Message):
    welcome_text = """
üöõ Transport Analytics Bot

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏, –∏ —è:
‚Ä¢ –°–æ–±–µ—Ä—É –¥–∞–Ω–Ω—ã–µ –∏–∑ –í–°–ï–• —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ü–æ–∫–∞–∂—É —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º –∏ –≤–æ–¥–∏—Ç–µ–ª—è–º
‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π –æ—Ç—á–µ—Ç

üìä –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

/report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (–∞–≤—Ç–æ + –≤–æ–¥–∏—Ç–µ–ª–∏)
/cars - –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º  
/drivers - –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤!
    """
    await message.answer(welcome_text)

@dp.message(Command("report"))
async def report_handler(message: Message):
    """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"""
    user_id = message.from_user.id
    user_data = user_data_store.get(user_id, [])
    
    await generate_report(message, user_data, "–ü–û–õ–ù–´–ô –û–¢–ß–ï–¢")

@dp.message(Command("cars"))
async def cars_handler(message: Message):
    """–û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º"""
    user_id = message.from_user.id
    user_data = user_data_store.get(user_id, [])
    
    if not user_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    stats = calculate_statistics(user_data)
    
    car_reports = []
    for car_plate, car_data in stats['car_stats'].items():
        drivers = ', '.join(car_data['drivers'])
        files = ', '.join(list(car_data['files'])[:3])
        if len(car_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(car_data['files']) - 3})"
        
        car_reports.append(f"üöó {car_plate}\n"
                         f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {car_data['trips_count']}\n"
                         f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: {drivers}\n"
                         f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                         f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {car_data['total_amount']:,.0f} —Ä—É–±.\n")
    
    response = f"""
üìä –û–¢–ß–ï–¢ –ü–û –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú

–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {stats['unique_cars']}
–û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} —Ä—É–±.

{chr(10).join(car_reports)}
    """
    
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
            await asyncio.sleep(0.5)
    else:
        await message.answer(response)

@dp.message(Command("drivers"))
async def drivers_handler(message: Message):
    """–û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º"""
    user_id = message.from_user.id
    user_data = user_data_store.get(user_id, [])
    
    if not user_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
    driver_stats = {}
    for item in user_data:
        driver = item['–í–æ–¥–∏—Ç–µ–ª—å']
        if driver not in driver_stats:
            driver_stats[driver] = {
                'total_amount': 0,
                'trips_count': 0,
                'cars': set(),
                'files': set()
            }
        driver_stats[driver]['total_amount'] += item['–°—Ç–æ–∏–º–æ—Å—Ç—å']
        driver_stats[driver]['trips_count'] += 1
        driver_stats[driver]['cars'].add(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'])
        driver_stats[driver]['files'].add(item['–§–∞–π–ª'])
    
    driver_reports = []
    for driver, driver_data in driver_stats.items():
        if driver == "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            continue
        cars = ', '.join(driver_data['cars'])
        files = ', '.join(list(driver_data['files'])[:3])
        if len(driver_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(driver_data['files']) - 3})"
        
        driver_reports.append(f"üë§ {driver}\n"
                            f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {driver_data['trips_count']}\n"
                            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏: {cars}\n"
                            f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {driver_data['total_amount']:,.0f} —Ä—É–±.\n")
    
    response = f"""
üìä –û–¢–ß–ï–¢ –ü–û –í–û–î–ò–¢–ï–õ–Ø–ú

–í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len([d for d in driver_stats.keys() if d != "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"])}
–û–±—â–∞—è —Å—É–º–º–∞: {sum(d['total_amount'] for d in driver_stats.values()):,.0f} —Ä—É–±.

{chr(10).join(driver_reports)}
    """
    
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
            await asyncio.sleep(0.5)
    else:
        await message.answer(response)

@dp.message(Command("clear"))
async def clear_handler(message: Message):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    if user_id in user_data_store:
        user_data_store[user_id] = []
        await message.answer("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
    else:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")
