import os
import logging
import pandas as pd
import io
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, 
    ContextTypes, 
    CommandHandler, 
    MessageHandler, 
    filters,
    CallbackQueryHandler
)

import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

from parser import process_excel_file

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

user_data = {}

# --- –í–ù–£–¢–†–ï–ù–ù–ò–ï –õ–û–ì–ò–ß–ï–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò (–¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–¥–∞) ---
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≥–æ—Ç–æ–≤—è—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è –µ–≥–æ.

def _build_stats_message(user_id: int) -> str:
    """–ì–æ—Ç–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    if user_id not in user_data or user_data[user_id].empty:
        return "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã."
    
    df = user_data[user_id]
    total_trips = len(df)
    total_earnings = df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
    unique_cars_count = df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].nunique()
    unique_drivers_count = df['–í–æ–¥–∏—Ç–µ–ª—å'].nunique()
    unique_files_count = df['–ò—Å—Ç–æ—á–Ω–∏–∫'].nunique()

    return (
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"‚ñ´Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {unique_files_count}\n"
        f"‚ñ´Ô∏è –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_trips}\n"
        f"‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{total_earnings:,.2f} —Ä—É–±.*\n"
        f"‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω: {unique_cars_count}\n"
        f"‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {unique_drivers_count}"
    )

def _build_top_stats_message(user_id: int) -> str:
    """–ì–æ—Ç–æ–≤–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ–ø–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –º–∞—à–∏–Ω."""
    if user_id not in user_data or user_data[user_id].empty:
        return "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."

    df = user_data[user_id]
    top_drivers = df.groupby('–í–æ–¥–∏—Ç–µ–ª—å')['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum().nlargest(5)
    top_drivers_text = "".join([f"{i}. {driver} - {total:,.0f} —Ä—É–±.\n" for i, (driver, total) in enumerate(top_drivers.items(), 1)])
    top_cars = df.groupby('–ì–æ—Å_–Ω–æ–º–µ—Ä')['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum().nlargest(5)
    top_cars_text = "".join([f"{i}. –ù–æ–º–µ—Ä {car} - {total:,.0f} —Ä—É–±.\n" for i, (car, total) in enumerate(top_cars.items(), 1)])

    return (
        f"üèÜ *–¢–æ–ø-5 –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É*\n\n"
        f"üë§ *–õ—É—á—à–∏–µ –≤–æ–¥–∏—Ç–µ–ª–∏:*\n{top_drivers_text or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        f"üöó *–°–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã:*\n{top_cars_text or '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–ù–û–ü–û–ö (—Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –ø—Ä–æ—â–µ) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–µ–∑–¥–æ–∫.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ Excel-—Ñ–∞–π–ª–æ–≤ (.xlsx). "
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    )
    if user_id in user_data and not user_data[user_id].empty:
        welcome_text += f"\n\n‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(user_data[user_id])}."
    
    keyboard = [
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [
            InlineKeyboardButton("üèÜ –¢–æ–ø-5", callback_data='top'),
            InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data='export')
        ],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='clear')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    command = query.data

    if command == 'stats':
        message_text = _build_stats_message(user_id)
        await query.edit_message_text(text=message_text, parse_mode='Markdown')
    
    elif command == 'top':
        message_text = _build_top_stats_message(user_id)
        await query.edit_message_text(text=message_text, parse_mode='Markdown')

    elif command == 'clear':
        if user_id in user_data:
            del user_data[user_id]
            message_text = "üóëÔ∏è –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã."
        else:
            message_text = "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏."
        await query.edit_message_text(text=message_text)
        # –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–∫–∞–∂–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
        await start(query, context)

    elif command == 'export':
        await export_data(update, context)


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    file = await update.message.document.get_file()
    file_name = update.message.document.file_name
    if not file_name.lower().endswith('.xlsx'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return
    await update.message.reply_text(f"‚è≥ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{file_name}'. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    file_content = await file.download_as_bytearray()
    new_df = process_excel_file(bytes(file_content), file_name)
    if new_df is None or new_df.empty:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}'.")
        return
    if user_id in user_data:
        user_data[user_id] = pd.concat([user_data[user_id], new_df], ignore_index=True)
    else:
        user_data[user_id] = new_df
    total_rows = len(user_data[user_id])
    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(new_df)}\n"
        f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_rows}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Ç–æ–≥–æ–≤."
    )

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    if user_id not in user_data or user_data[user_id].empty:
        await context.bot.send_message(chat_id, "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
        
    df = user_data[user_id]
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç')
        worksheet = writer.sheets['–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç']
        for idx, col in enumerate(df):
            series = df[col]
            max_len = max((series.astype(str).map(len).max(), len(str(series.name)))) + 1
            worksheet.set_column(idx, idx, max_len)
    output.seek(0)
    await context.bot.send_document(
        chat_id=chat_id, 
        document=output, 
        filename='—Å–≤–æ–¥–Ω—ã–π_–æ—Ç—á–µ—Ç.xlsx',
        caption='üìä –í–∞—à —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º.'
    )

async def car_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data or user_data[user_id].empty:
        await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: `/car 123`")
        return
    car_number = context.args[0]
    df = user_data[user_id]
    car_df = df[df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].astype(str).str.contains(car_number, case=False, na=False)]
    if car_df.empty:
        await update.message.reply_text(f"‚ùå –ú–∞—à–∏–Ω–∞ —Å –≥–æ—Å–Ω–æ–º–µ—Ä–æ–º '{car_number}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    total_trips = len(car_df)
    total_earnings = car_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
    drivers = ", ".join(car_df['–í–æ–¥–∏—Ç–µ–ª—å'].unique())
    message = (
        f"üöó *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—à–∏–Ω–µ {car_number}*\n\n"
        f"‚ñ´Ô∏è –°–æ–≤–µ—Ä—à–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_trips}\n"
        f"‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{total_earnings:,.2f} —Ä—É–±.*\n"
        f"‚ñ´Ô∏è –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–∞ —ç—Ç–æ–π –º–∞—à–∏–Ω–µ: {drivers}"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='Markdown')
    
async def driver_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_data or user_data[user_id].empty:
        await update.message.reply_text("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: `/driver –ò–≤–∞–Ω–æ–≤`")
        return
    driver_name = context.args[0]
    df = user_data[user_id]
    driver_df = df[df['–í–æ–¥–∏—Ç–µ–ª—å'].str.contains(driver_name, case=False, na=False)]
    if driver_df.empty:
        await update.message.reply_text(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å —Ñ–∞–º–∏–ª–∏–µ–π '{driver_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    total_trips = len(driver_df)
    total_earnings = driver_df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
    cars = ", ".join(driver_df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].unique())
    message = (
        f"üë§ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é {driver_name}*\n\n"
        f"‚ñ´Ô∏è –°–æ–≤–µ—Ä—à–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_trips}\n"
        f"‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{total_earnings:,.2f} —Ä—É–±.*\n"
        f"‚ñ´Ô∏è –†–∞–±–æ—Ç–∞–ª(–∞) –Ω–∞ –º–∞—à–∏–Ω–∞—Ö: {cars}"
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode='Markdown')

# --- –ö–æ–¥ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class HealthCheckHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write(b"Bot is alive")

def run_health_check_server():
    port = int(os.environ.get("PORT", 8080))
    server_address = ('', port)
    httpd = HTTPServer(server_address, HealthCheckHandler)
    logging.info(f"Health check server running on port {port}")
    httpd.serve_forever()

if __name__ == '__main__':
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    if not TOKEN:
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")

    application = ApplicationBuilder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('car', car_stats))
    application.add_handler(CommandHandler('driver', driver_stats))
    
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    health_thread = threading.Thread(target=run_health_check_server)
    health_thread.daemon = True
    health_thread.start()
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()
