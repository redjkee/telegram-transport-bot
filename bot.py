import os
import openpyxl
import re
from datetime import datetime
from pathlib import Path
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import logging
import tempfile
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SELECT_TYPE, INPUT_VALUE = range(2)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data_dict = {}

def get_current_month():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–∞ —Ä—É—Å—Å–∫–æ–º"""
    month_names = {
        '01': '—è–Ω–≤–∞—Ä—å', '02': '—Ñ–µ–≤—Ä–∞–ª—å', '03': '–º–∞—Ä—Ç', '04': '–∞–ø—Ä–µ–ª—å',
        '05': '–º–∞–π', '06': '–∏—é–Ω—å', '07': '–∏—é–ª—å', '08': '–∞–≤–≥—É—Å—Ç',
        '09': '—Å–µ–Ω—Ç—è–±—Ä—å', '10': '–æ–∫—Ç—è–±—Ä—å', '11': '–Ω–æ—è–±—Ä—å', '12': '–¥–µ–∫–∞–±—Ä—å'
    }
    current_month = datetime.now().month
    return month_names.get(str(current_month).zfill(2))

def find_table_structure(ws):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–∞–º"""
    headers_positions = {}
    
    for row in ws.iter_rows():
        for cell in row:
            if cell.value:
                cell_value = str(cell.value).strip()
                
                if "–¢–æ–≤–∞—Ä—ã (—Ä–∞–±–æ—Ç—ã, —É—Å–ª—É–≥–∏)" in cell_value:
                    headers_positions['description'] = (cell.row, cell.column)
                elif "–°—É–º–º–∞" in cell_value and cell_value != "–°—É–º–º–∞ —Å –ù–î–°":
                    headers_positions['amount'] = (cell.row, cell.column)
                elif "‚Ññ" == cell_value and cell.column < 10:
                    headers_positions['number'] = (cell.row, cell.column)
                elif "–ö–æ–ª-–≤–æ" in cell_value:
                    headers_positions['quantity'] = (cell.row, cell.column)
                elif "–ï–¥." in cell_value:
                    headers_positions['unit'] = (cell.row, cell.column)
                elif "–¶–µ–Ω–∞" in cell_value:
                    headers_positions['price'] = (cell.row, cell.column)
    
    return headers_positions

def extract_data_from_description(description):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É, –º–∞—Ä—à—Ä—É—Ç, –≥–æ—Å. –Ω–æ–º–µ—Ä –∏ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description_str = str(description)
    
    # –ú–∞—Ä—à—Ä—É—Ç (–≤—Å–µ –¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π)
    route = description_str.split(',')[0].strip()
    
    # –î–∞—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (—Ñ–æ—Ä–º–∞—Ç "–æ—Ç 06.09.25")
    date_match = re.search(r'–æ—Ç\s+(\d{2}\.\d{2}\.\d{2})', description_str)
    date_str = date_match.group(1) if date_match else "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    # –ì–æ—Å. –Ω–æ–º–µ—Ä - –∏—â–µ–º 3 —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥
    plate_match = re.search(r'(\d{3})', description_str)
    car_plate = plate_match.group(1) if plate_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –§–∞–º–∏–ª–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
    driver_match = re.search(r',\s*([–ê-–Ø][–∞-—è]+)\s+[–ê-–Ø]\.[–ê-–Ø]\.', description_str)
    if driver_match:
        driver_name = driver_match.group(1)
    else:
        alt_driver_match = re.search(r',\s*([–ê-–Ø][–∞-—è]+)', description_str)
        driver_name = alt_driver_match.group(1) if alt_driver_match else "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    return route, date_str, car_plate, driver_name

def parse_invoice_file(file_path):
    """–ü–∞—Ä—Å–∏—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª —Å—á–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    try:
        wb = openpyxl.load_workbook(file_path, data_only=True)
        ws = wb.active
        
        headers = find_table_structure(ws)
        
        if not headers.get('description') or not headers.get('amount'):
            return []
        
        header_row = max(h[0] for h in headers.values())
        description_col = headers['description'][1]
        amount_col = headers['amount'][1]
        
        parsed_data = []
        row_num = header_row + 1
        processed_count = 0
        current_empty_rows = 0
        max_empty_rows = 5
        
        while current_empty_rows < max_empty_rows:
            description_cell = ws.cell(row=row_num, column=description_col)
            description = description_cell.value
            
            if not description:
                current_empty_rows += 1
                row_num += 1
                continue
                
            current_empty_rows = 0
            description_str = str(description)
            
            if any(word in description_str.lower() for word in ['–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ', '–∏—Ç–æ–≥', '—Å—É–º–º–∞']):
                row_num += 1
                continue
            
            amount_cell = ws.cell(row=row_num, column=amount_col)
            amount = amount_cell.value
            
            if amount is not None:
                try:
                    if isinstance(amount, str) and any(char.isalpha() for char in amount.replace(' ', '').replace(',', '.')):
                        row_num += 1
                        continue
                    
                    amount_str = str(amount).replace(' ', '').replace(',', '.')
                    amount_value = float(amount_str)
                    
                    route, date_str, car_plate, driver_name = extract_data_from_description(description_str)
                    
                    if car_plate != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and amount_value > 0:
                        parsed_data.append({
                            '–î–∞—Ç–∞': date_str,
                            '–ú–∞—Ä—à—Ä—É—Ç': route,
                            '–°—Ç–æ–∏–º–æ—Å—Ç—å': amount_value,
                            '–ì–æ—Å_–Ω–æ–º–µ—Ä': car_plate,
                            '–í–æ–¥–∏—Ç–µ–ª—å': driver_name,
                            '–ò—Å—Ç–æ—á–Ω–∏–∫': file_path.name
                        })
                        processed_count += 1
                    
                except (ValueError, TypeError):
                    pass
            
            row_num += 1
            
            if row_num > header_row + 1000:
                break
        
        return parsed_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üöõ\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n\n"
        "üìä –ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Excel-—Ñ–∞–π–ª—ã —Å –ø–æ–µ–∑–¥–∫–∞–º–∏\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –≥–æ—Å. –Ω–æ–º–µ—Ä—É –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—é\n\n"
        "üìé –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª Excel —Å –æ—Ç—á–µ—Ç–æ–º!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/search - –ø–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—é\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞"
    )
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
        "1. üìé –û—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–æ–º –æ –ø–æ–µ–∑–¥–∫–∞—Ö\n"
        "2. üìä –ò—Å–ø–æ–ª—å–∑—É–π /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
        "3. üîç –ò—Å–ø–æ–ª—å–∑—É–π /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ:\n"
        "   ‚Ä¢ –ì–æ—Å. –Ω–æ–º–µ—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123)\n"
        "   ‚Ä¢ –§–∞–º–∏–ª–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è\n"
        "4. üóëÔ∏è /clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Excel-—Ñ–∞–π–ª—ã —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏, —Å—É–º–º–∞–º–∏, –≥–æ—Å. –Ω–æ–º–µ—Ä–∞–º–∏ –∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏."
    )
    await update.message.reply_text(help_text)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    user_id = update.message.from_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if user_id not in user_data_dict:
            user_data_dict[user_id] = []
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        document = update.message.document
        file = await context.bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as temp_file:
            await file.download_to_drive(temp_file.name)
            
            # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
            parsed_data = parse_invoice_file(Path(temp_file.name))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_data_dict[user_id].extend(parsed_data)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(temp_file.name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        total_files = len(set(item['–ò—Å—Ç–æ—á–Ω–∏–∫'] for item in user_data_dict[user_id]))
        total_trips = len(parsed_data)
        total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in parsed_data)
        unique_cars = len(set(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'] for item in parsed_data))
        unique_drivers = len(set(item['–í–æ–¥–∏—Ç–µ–ª—å'] for item in parsed_data))
        
        response = (
            f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–∞:\n"
            f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {total_trips}\n"
            f"‚Ä¢ –°—É–º–º–∞: {total_amount:,.0f} —Ä—É–±.\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω: {unique_cars}\n"
            f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {unique_drivers}\n\n"
            f"üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}\n"
            f"üìà –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {len(user_data_dict[user_id])}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π /stats –¥–ª—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–ª–∏ /search –¥–ª—è –ø–æ–∏—Å–∫–∞."
        )
        
        await update.message.reply_text(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Excel-—Ñ–∞–π–ª —Å –æ—Ç—á–µ—Ç–∞–º–∏.")

def calculate_statistics(data):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ pandas"""
    if not data:
        return {}
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_trips = len(data)
    total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in data)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
    car_stats = defaultdict(lambda: {'sum': 0, 'count': 0, 'drivers': set()})
    for item in data:
        if item['–ì–æ—Å_–Ω–æ–º–µ—Ä'] != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            car_stats[item['–ì–æ—Å_–Ω–æ–º–µ—Ä']]['sum'] += item['–°—Ç–æ–∏–º–æ—Å—Ç—å']
            car_stats[item['–ì–æ—Å_–Ω–æ–º–µ—Ä']]['count'] += 1
            car_stats[item['–ì–æ—Å_–Ω–æ–º–µ—Ä']]['drivers'].add(item['–í–æ–¥–∏—Ç–µ–ª—å'])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
    driver_stats = defaultdict(lambda: {'sum': 0, 'count': 0, 'cars': set()})
    for item in data:
        if item['–í–æ–¥–∏—Ç–µ–ª—å'] != "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            driver_stats[item['–í–æ–¥–∏—Ç–µ–ª—å']]['sum'] += item['–°—Ç–æ–∏–º–æ—Å—Ç—å']
            driver_stats[item['–í–æ–¥–∏—Ç–µ–ª—å']]['count'] += 1
            driver_stats[item['–í–æ–¥–∏—Ç–µ–ª—å']]['cars'].add(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'])
    
    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    unique_cars = len([car for car in car_stats.keys() if car != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])
    unique_drivers = len([driver for driver in driver_stats.keys() if driver != "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"])
    unique_files = len(set(item['–ò—Å—Ç–æ—á–Ω–∏–∫'] for item in data))
    
    return {
        'total_trips': total_trips,
        'total_amount': total_amount,
        'unique_cars': unique_cars,
        'unique_drivers': unique_drivers,
        'unique_files': unique_files,
        'car_stats': dict(car_stats),
        'driver_stats': dict(driver_stats)
    }

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.message.from_user.id
    
    if user_id not in user_data_dict or not user_data_dict[user_id]:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏.")
        return
    
    stats = calculate_statistics(user_data_dict[user_id])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
    car_stats_text = "üöó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º:\n"
    for car_plate, car_data in stats['car_stats'].items():
        if car_plate != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
            amount = car_data['sum']
            count = car_data['count']
            drivers = len(car_data['drivers'])
            car_stats_text += f"‚Ä¢ {car_plate}: {count} –ø–æ–µ–∑–¥–æ–∫, {amount:,.0f} —Ä—É–±., {drivers} –≤–æ–¥–∏—Ç.\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
    driver_stats_text = "\nüë§ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º:\n"
    for driver, driver_data in stats['driver_stats'].items():
        if driver != "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            amount = driver_data['sum']
            count = driver_data['count']
            cars = len(driver_data['cars'])
            driver_stats_text += f"‚Ä¢ {driver}: {count} –ø–æ–µ–∑–¥–æ–∫, {amount:,.0f} —Ä—É–±., {cars} –º–∞—à–∏–Ω\n"
    
    response = (
        f"üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
        f"üìà –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {stats['total_trips']}\n"
        f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} —Ä—É–±.\n"
        f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {stats['unique_cars']}\n"
        f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π: {stats['unique_drivers']}\n"
        f"‚Ä¢ –§–∞–π–ª–æ–≤: {stats['unique_files']}\n\n"
        f"{car_stats_text}"
        f"{driver_stats_text}"
    )
    
    await update.message.reply_text(response)

async def search_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞"""
    user_id = update.message.from_user.id
    
    if user_id not in user_data_dict or not user_data_dict[user_id]:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å –æ—Ç—á–µ—Ç–∞–º–∏.")
        return ConversationHandler.END
    
    keyboard = [['üöó –ü–æ –≥–æ—Å. –Ω–æ–º–µ—Ä—É', 'üë§ –ü–æ –≤–æ–¥–∏—Ç–µ–ª—é']]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    
    await update.message.reply_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
        reply_markup=reply_markup
    )
    
    return SELECT_TYPE

async def select_search_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞"""
    search_type = update.message.text
    
    if search_type == 'üöó –ü–æ –≥–æ—Å. –Ω–æ–º–µ—Ä—É':
        context.user_data['search_type'] = 'car'
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: 123):",
            reply_markup=None
        )
    elif search_type == 'üë§ –ü–æ –≤–æ–¥–∏—Ç–µ–ª—é':
        context.user_data['search_type'] = 'driver'
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=None
        )
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SELECT_TYPE
    
    return INPUT_VALUE

async def perform_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
    user_id = update.message.from_user.id
    search_value = update.message.text
    search_type = context.user_data.get('search_type')
    
    data = user_data_dict[user_id]
    
    if search_type == 'car':
        results = [item for item in data if item['–ì–æ—Å_–Ω–æ–º–µ—Ä'] == search_value]
        search_title = f"üöó –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –≥–æ—Å. –Ω–æ–º–µ—Ä—É: {search_value}"
    else:
        results = [item for item in data if search_value.lower() in item['–í–æ–¥–∏—Ç–µ–ª—å'].lower()]
        search_title = f"üë§ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é: {search_value}"
    
    if not results:
        await update.message.reply_text(f"‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END
    
    total_trips = len(results)
    total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in results)
    avg_amount = total_amount / total_trips if total_trips > 0 else 0
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–µ–∑–¥–æ–∫
    details_text = "\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏:\n"
    for item in results[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        details_text += f"‚Ä¢ {item['–î–∞—Ç–∞']}: {item['–ú–∞—Ä—à—Ä—É—Ç'][:30]}... - {item['–°—Ç–æ–∏–º–æ—Å—Ç—å']:,.0f} —Ä—É–±.\n"
    
    if len(results) > 10:
        details_text += f"... –∏ –µ—â–µ {len(results) - 10} –ø–æ–µ–∑–¥–æ–∫\n"
    
    response = (
        f"{search_title}\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–æ–∫: {total_trips}\n"
        f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.0f} —Ä—É–±.\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {avg_amount:,.0f} —Ä—É–±.\n"
        f"{details_text}"
    )
    
    await update.message.reply_text(response)
    return ConversationHandler.END

async def cancel_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞"""
    await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

async def clear_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    
    if user_id in user_data_dict:
        user_data_dict[user_id] = []
        await update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.")
    else:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if update and update.message:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
    TOKEN = os.getenv('BOT_TOKEN')
    
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("clear", clear_data))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    # ConversationHandler –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_conv = ConversationHandler(
        entry_points=[CommandHandler("search", search_start)],
        states={
            SELECT_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_search_type)],
            INPUT_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, perform_search)],
        },
        fallbacks=[CommandHandler("cancel", cancel_search)]
    )
    application.add_handler(search_conv)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    main()
