import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import pandas as pd
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv('BOT_TOKEN')

if not API_TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_store = {}

def calculate_statistics(data):
    """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
    if not data:
        return {}
    
    total_trips = len(data)
    unique_files = len(set(item['–§–∞–π–ª'] for item in data))
    unique_cars = len(set(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'] for item in data))
    unique_drivers = len(set(item['–í–æ–¥–∏—Ç–µ–ª—å'] for item in data if item['–í–æ–¥–∏—Ç–µ–ª—å'] != "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
    total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in data)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
    car_stats = {}
    for item in data:
        car_plate = item['–ì–æ—Å_–Ω–æ–º–µ—Ä']
        if car_plate not in car_stats:
            car_stats[car_plate] = {
                'trips_count': 0,
                'total_amount': 0,
                'drivers': set(),
                'files': set()
            }
        car_stats[car_plate]['trips_count'] += 1
        car_stats[car_plate]['total_amount'] += item['–°—Ç–æ–∏–º–æ—Å—Ç—å']
        car_stats[car_plate]['drivers'].add(item['–í–æ–¥–∏—Ç–µ–ª—å'])
        car_stats[car_plate]['files'].add(item['–§–∞–π–ª'])
    
    return {
        'total_trips': total_trips,
        'unique_files': unique_files,
        'unique_cars': unique_cars,
        'unique_drivers': unique_drivers,
        'total_amount': total_amount,
        'car_stats': car_stats
    }

async def generate_report(message: Message, data, title):
    if not data:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return
    
    stats = calculate_statistics(data)
    
    # –û—Ç—á–µ—Ç –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
    car_reports = []
    for car_plate, car_data in stats['car_stats'].items():
        drivers = ', '.join(car_data['drivers'])
        files = ', '.join(list(car_data['files'])[:3])
        if len(car_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(car_data['files']) - 3})"
        
        car_reports.append(f"üöó {car_plate}\n"
                         f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {car_data['trips_count']}\n"
                         f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: {drivers}\n"
                         f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                         f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {car_data['total_amount']:,.0f} —Ä—É–±.")
    
    # –û—Ç—á–µ—Ç –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
    driver_stats = {}
    for item in data:
        driver = item['–í–æ–¥–∏—Ç–µ–ª—å']
        if driver not in driver_stats:
            driver_stats[driver] = {
                'total_amount': 0,
                'trips_count': 0,
                'cars': set(),
                'files': set()
            }
        driver_stats[driver]['total_amount'] += item['–°—Ç–æ–∏–º–æ—Å—Ç—å']
        driver_stats[driver]['trips_count'] += 1
        driver_stats[driver]['cars'].add(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'])
        driver_stats[driver]['files'].add(item['–§–∞–π–ª'])
    
    driver_reports = []
    for driver, driver_data in driver_stats.items():
        if driver == "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            continue
        cars = ', '.join(driver_data['cars'])
        files = ', '.join(list(driver_data['files'])[:3])
        if len(driver_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(driver_data['files']) - 3})"
        
        driver_reports.append(f"üë§ {driver}\n"
                            f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {driver_data['trips_count']}\n"
                            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏: {cars}\n"
                            f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {driver_data['total_amount']:,.0f} —Ä—É–±.")
    
    response = f"""
üìä {title}

–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['unique_files']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {stats['total_trips']}
‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {stats['unique_cars']}  
‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π: {stats['unique_drivers']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} —Ä—É–±.

–ü–û –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú:
{chr(10).join(car_reports)}

–ü–û –í–û–î–ò–¢–ï–õ–Ø–ú:
{chr(10).join(driver_reports)}

‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!
    """
    
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
            await asyncio.sleep(0.5)
    else:
        await message.answer(response)

@dp.message(Command("start"))
async def start_handler(message: Message):
    welcome_text = """
üöõ Transport Analytics Bot

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏, –∏ —è:
‚Ä¢ –°–æ–±–µ—Ä—É –¥–∞–Ω–Ω—ã–µ –∏–∑ –í–°–ï–• —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ü–æ–∫–∞–∂—É —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º –∏ –≤–æ–¥–∏—Ç–µ–ª—è–º
‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π –æ—Ç—á–µ—Ç

üìä –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

/report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (–∞–≤—Ç–æ + –≤–æ–¥–∏—Ç–µ–ª–∏)
/cars - –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º  
/drivers - –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

üîç –ü–û–ò–°–ö:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 302) –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤!
    """
    await message.answer(welcome_text)

@dp.message(Command("report"))
async def report_handler(message: Message):
    """–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç"""
    user_id = message.from_user.id
    user_data = user_data_store.get(user_id, [])
    
    await generate_report(message, user_data, "–ü–û–õ–ù–´–ô –û–¢–ß–ï–¢")

@dp.message(Command("cars"))
async def cars_handler(message: Message):
    """–û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º"""
    user_id = message.from_user.id
    user_data = user_data_store.get(user_id, [])
    
    if not user_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    stats = calculate_statistics(user_data)
    
    car_reports = []
    for car_plate, car_data in stats['car_stats'].items():
        drivers = ', '.join(car_data['drivers'])
        files = ', '.join(list(car_data['files'])[:3])
        if len(car_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(car_data['files']) - 3})"
        
        car_reports.append(f"üöó {car_plate}\n"
                         f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {car_data['trips_count']}\n"
                         f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: {drivers}\n"
                         f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                         f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {car_data['total_amount']:,.0f} —Ä—É–±.\n")
    
    response = f"""
üìä –û–¢–ß–ï–¢ –ü–û –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú

–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {stats['unique_cars']}
–û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} —Ä—É–±.

{chr(10).join(car_reports)}
    """
    
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
            await asyncio.sleep(0.5)
    else:
        await message.answer(response)

@dp.message(Command("drivers"))
async def drivers_handler(message: Message):
    """–û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º"""
    user_id = message.from_user.id
    user_data = user_data_store.get(user_id, [])
    
    if not user_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
    driver_stats = {}
    for item in user_data:
        driver = item['–í–æ–¥–∏—Ç–µ–ª—å']
        if driver not in driver_stats:
            driver_stats[driver] = {
                'total_amount': 0,
                'trips_count': 0,
                'cars': set(),
                'files': set()
            }
        driver_stats[driver]['total_amount'] += item['–°—Ç–æ–∏–º–æ—Å—Ç—å']
        driver_stats[driver]['trips_count'] += 1
        driver_stats[driver]['cars'].add(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'])
        driver_stats[driver]['files'].add(item['–§–∞–π–ª'])
    
    driver_reports = []
    for driver, driver_data in driver_stats.items():
        if driver == "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            continue
        cars = ', '.join(driver_data['cars'])
        files = ', '.join(list(driver_data['files'])[:3])
        if len(driver_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(driver_data['files']) - 3})"
        
        driver_reports.append(f"üë§ {driver}\n"
                            f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {driver_data['trips_count']}\n"
                            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏: {cars}\n"
                            f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {driver_data['total_amount']:,.0f} —Ä—É–±.\n")
    
    response = f"""
üìä –û–¢–ß–ï–¢ –ü–û –í–û–î–ò–¢–ï–õ–Ø–ú

–í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len([d for d in driver_stats.keys() if d != "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"])}
–û–±—â–∞—è —Å—É–º–º–∞: {sum(d['total_amount'] for d in driver_stats.values()):,.0f} —Ä—É–±.

{chr(10).join(driver_reports)}
    """
    
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
            await asyncio.sleep(0.5)
    else:
        await message.answer(response)

@dp.message(Command("clear"))
async def clear_handler(message: Message):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    user_id = message.from_user.id
    if user_id in user_data_store:
        user_data_store[user_id] = []
        await message.answer("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!")
    else:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")

@dp.message()
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º"""
    user_id = message.from_user.id
    user_data = user_data_store.get(user_id, [])
    
    if not user_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    search_text = message.text.strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏)
    if search_text.startswith('/'):
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Ü–∏—Ñ—Ä—ã)
    if search_text.isdigit():
        car_results = [item for item in user_data if search_text in item['–ì–æ—Å_–Ω–æ–º–µ—Ä']]
        
        if car_results:
            car_plates = set(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'] for item in car_results)
            total_trips = len(car_results)
            total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in car_results)
            drivers = set(item['–í–æ–¥–∏—Ç–µ–ª—å'] for item in car_results if item['–í–æ–¥–∏—Ç–µ–ª—å'] != "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            files = set(item['–§–∞–π–ª'] for item in car_results)
            
            response = f"""
üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ü–û –ê–í–¢–û–ú–û–ë–ò–õ–Æ: {search_text}

–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(car_plates)}
‚Ä¢ –ù–æ–º–µ—Ä–∞: {', '.join(car_plates)}
‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {total_trips}
‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: {', '.join(drivers) if drivers else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
‚Ä¢ –§–∞–π–ª–æ–≤: {len(files)}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.0f} —Ä—É–±.

–î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–æ–∫:
"""
            
            for i, item in enumerate(car_results[:10], 1):
                response += f"\n{i}. {item['–î–∞—Ç–∞']} - {item['–í–æ–¥–∏—Ç–µ–ª—å']} - {item['–°—Ç–æ–∏–º–æ—Å—Ç—å']:,.0f} —Ä—É–±."
            
            if len(car_results) > 10:
                response += f"\n\n... –∏ –µ—â–µ {len(car_results) - 10} –ø–æ–µ–∑–¥–æ–∫"
                
            await message.answer(response)
        else:
            await message.answer(f"‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–æ–º–µ—Ä–æ–º '{search_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç)
    else:
        driver_results = [item for item in user_data if search_text.lower() in item['–í–æ–¥–∏—Ç–µ–ª—å'].lower()]
        
        if driver_results:
            drivers_found = set(item['–í–æ–¥–∏—Ç–µ–ª—å'] for item in driver_results)
            total_trips = len(driver_results)
            total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in driver_results)
            cars = set(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'] for item in driver_results)
            files = set(item['–§–∞–π–ª'] for item in driver_results)
            
            response = f"""
üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ü–û –í–û–î–ò–¢–ï–õ–Æ: {search_text}

–ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(drivers_found)}
‚Ä¢ –§–∞–º–∏–ª–∏–∏: {', '.join(drivers_found)}
‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {total_trips}
‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏: {', '.join(cars)}
‚Ä¢ –§–∞–π–ª–æ–≤: {len(files)}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.0f} —Ä—É–±.

–î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–æ–∫:
"""
            
            for i, item in enumerate(driver_results[:10], 1):
                response += f"\n{i}. {item['–î–∞—Ç–∞']} - {item['–ì–æ—Å_–Ω–æ–º–µ—Ä']} - {item['–°—Ç–æ–∏–º–æ—Å—Ç—å']:,.0f} —Ä—É–±."
            
            if len(driver_results) > 10:
                response += f"\n\n... –∏ –µ—â–µ {len(driver_results) - 10} –ø–æ–µ–∑–¥–æ–∫"
                
            await message.answer(response)
        else:
            await message.answer(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å '{search_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
@dp.message(lambda message: message.document)
async def handle_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    # –í–∞—à–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–æ–≤
    user_id = message.from_user.id
    # ... –≤–∞—à –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ...
    await message.answer("üìÅ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /report, /cars, /drivers –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤.")

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
