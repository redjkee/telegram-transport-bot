import os
import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from openpyxl import load_workbook
import re
import tempfile
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_store = defaultdict(list)

# –§—É–Ω–∫—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
def find_table_structure(ws):
    headers_positions = {}
    for row in ws.iter_rows():
        for cell in row:
            if cell.value:
                cell_value = str(cell.value).strip()
                if "–¢–æ–≤–∞—Ä—ã (—Ä–∞–±–æ—Ç—ã, —É—Å–ª—É–≥–∏)" in cell_value:
                    headers_positions['description'] = (cell.row, cell.column)
                elif "–°—É–º–º–∞" in cell_value and cell_value != "–°—É–º–º–∞ —Å –ù–î–°":
                    headers_positions['amount'] = (cell.row, cell.column)
    return headers_positions

def extract_data_from_description(description):
    description_str = str(description)
    route = description_str.split(',')[0].strip()
    date_match = re.search(r'–æ—Ç\s+(\d{2}\.\d{2}\.\d{2})', description_str)
    date_str = date_match.group(1) if date_match else "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    plate_match = re.search(r'(\d{3})', description_str)
    car_plate = plate_match.group(1) if plate_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    driver_match = re.search(r',\s*([–ê-–Ø][–∞-—è]+)\s+[–ê-–Ø]\.[–ê-–Ø]\.', description_str)
    if driver_match:
        driver_name = driver_match.group(1)
    else:
        alt_driver_match = re.search(r',\s*([–ê-–Ø][–∞-—è]+)', description_str)
        driver_name = alt_driver_match.group(1) if alt_driver_match else "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    return route, date_str, car_plate, driver_name

def parse_invoice_file(file_path):
    try:
        wb = load_workbook(file_path, data_only=True)
        ws = wb.active
        headers = find_table_structure(ws)
        
        if not headers.get('description') or not headers.get('amount'):
            return []
        
        header_row = max(h[0] for h in headers.values())
        description_col = headers['description'][1]
        amount_col = headers['amount'][1]
        
        parsed_data = []
        row_num = header_row + 1
        current_empty_rows = 0
        max_empty_rows = 5
        
        while current_empty_rows < max_empty_rows:
            description_cell = ws.cell(row=row_num, column=description_col)
            description = description_cell.value
            
            if not description:
                current_empty_rows += 1
                row_num += 1
                continue
                
            current_empty_rows = 0
            description_str = str(description)
            
            if any(word in description_str.lower() for word in ['–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ', '–∏—Ç–æ–≥', '—Å—É–º–º–∞']):
                row_num += 1
                continue
            
            amount_cell = ws.cell(row=row_num, column=amount_col)
            amount = amount_cell.value
            
            if amount is not None:
                try:
                    if isinstance(amount, str) and any(char.isalpha() for char in amount.replace(' ', '').replace(',', '.')):
                        row_num += 1
                        continue
                    
                    amount_str = str(amount).replace(' ', '').replace(',', '.')
                    amount_value = float(amount_str)
                    
                    route, date_str, car_plate, driver_name = extract_data_from_description(description_str)
                    
                    if car_plate != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and amount_value > 0:
                        parsed_data.append({
                            '–î–∞—Ç–∞': date_str,
                            '–ú–∞—Ä—à—Ä—É—Ç': route,
                            '–°—Ç–æ–∏–º–æ—Å—Ç—å': amount_value,
                            '–ì–æ—Å_–Ω–æ–º–µ—Ä': car_plate,
                            '–í–æ–¥–∏—Ç–µ–ª—å': driver_name,
                            '–§–∞–π–ª': os.path.basename(file_path)
                        })
                    
                except (ValueError, TypeError):
                    pass
            
            row_num += 1
            
            if row_num > header_row + 1000:
                break
        
        return parsed_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–ï–ó PANDAS
def calculate_statistics(data):
    """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ pandas"""
    if not data:
        return None
    
    total_trips = len(data)
    total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in data)
    
    unique_cars = set(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'] for item in data)
    unique_drivers = set(item['–í–æ–¥–∏—Ç–µ–ª—å'] for item in data)
    unique_files = set(item['–§–∞–π–ª'] for item in data)
    
    car_stats = {}
    for item in data:
        car_plate = item['–ì–æ—Å_–Ω–æ–º–µ—Ä']
        if car_plate not in car_stats:
            car_stats[car_plate] = {
                'total_amount': 0,
                'trips_count': 0,
                'drivers': set(),
                'files': set()
            }
        
        car_stats[car_plate]['total_amount'] += item['–°—Ç–æ–∏–º–æ—Å—Ç—å']
        car_stats[car_plate]['trips_count'] += 1
        car_stats[car_plate]['drivers'].add(item['–í–æ–¥–∏—Ç–µ–ª—å'])
        car_stats[car_plate]['files'].add(item['–§–∞–π–ª'])
    
    return {
        'total_trips': total_trips,
        'total_amount': total_amount,
        'unique_cars': len(unique_cars),
        'unique_drivers': len(unique_drivers),
        'unique_files': len(unique_files),
        'car_stats': car_stats
    }

def calculate_file_statistics(file_data):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É"""
    if not file_data:
        return None
    
    total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in file_data)
    trips_count = len(file_data)
    
    return {
        'total_amount': total_amount,
        'trips_count': trips_count
    }

def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
üöõ *Transport Analytics Bot*

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏, –∏ —è:
‚Ä¢ –°–æ–±–µ—Ä—É –¥–∞–Ω–Ω—ã–µ –∏–∑ –í–°–ï–• —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ü–æ–∫–∞–∂—É —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º
‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π –æ—Ç—á–µ—Ç

*–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:*
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–∏–Ω —Ñ–∞–π–ª - –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –Ω–µ–º—É
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ - –ø–æ–ª—É—á–∏—Ç–µ –û–ë–©–ò–ô –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º
3. /clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
4. /report - –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:* .xlsx, .xls

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º!
    """
    update.message.reply_text(welcome_text, parse_mode='Markdown')

def clear_data(update: Update, context: CallbackContext):
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_data_store[user_id] = []
    update.message.reply_text("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã! –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.")

def show_report(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º"""
    user_id = update.effective_user.id
    user_data = user_data_store[user_id]
    
    if not user_data:
        update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    generate_report(update, user_data, "–¢–ï–ö–£–©–ò–ô –û–¢–ß–ï–¢")

def handle_document(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        user_id = update.effective_user.id
        
        document = update.message.document
        file = context.bot.get_file(document.file_id)
        
        if not (document.file_name.endswith('.xlsx') or document.file_name.endswith('.xls')):
            update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)")
            return
        
        update.message.reply_text(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {document.file_name}")
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as temp_file:
            file.download(out=temp_file)
            
            file_data = parse_invoice_file(temp_file.name)
            
            os.unlink(temp_file.name)
        
        if not file_data:
            update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            return
        
        user_data_store[user_id].extend(file_data)
        
        file_stats = calculate_file_statistics(file_data)
        user_data = user_data_store[user_id]
        all_stats = calculate_statistics(user_data)
        
        response = f"""
üìÑ *–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {document.file_name}*

*–î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞:*
‚Ä¢ –ü–æ–µ–∑–¥–æ–∫ –≤ —Ñ–∞–π–ª–µ: {file_stats['trips_count']}
‚Ä¢ –°—É–º–º–∞ –≤ —Ñ–∞–π–ª–µ: {file_stats['total_amount']:,.0f} —Ä—É–±.

*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –§–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {all_stats['unique_files']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {all_stats['total_trips']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {all_stats['total_amount']:,.0f} —Ä—É–±.

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞
        """
        
        update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")

def generate_report(update: Update, data, title):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
    if not data:
        update.message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return
    
    stats = calculate_statistics(data)
    
    car_reports = []
    for car_plate, car_data in stats['car_stats'].items():
        drivers = ', '.join(car_data['drivers'])
        files = ', '.join(list(car_data['files'])[:3])
        if len(car_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(car_data['files']) - 3})"
        
        car_reports.append(f"üöó *{car_plate}*\n"
                         f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {car_data['trips_count']}\n"
                         f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: {drivers}\n"
                         f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                         f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {car_data['total_amount']:,.0f} —Ä—É–±.\n")
    
    response = f"""
üìä *{title}*

*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['unique_files']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {stats['total_trips']}
‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {stats['unique_cars']}  
‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π: {stats['unique_drivers']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} —Ä—É–±.

*–ü–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º:*
{chr(10).join(car_reports)}

‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!
    """
    
    if len(response) > 4000:
        parts = []
        current_part = ""
        for line in response.split('\n'):
            if len(current_part + line + '\n') > 4000:
                parts.append(current_part)
                current_part = line + '\n'
            else:
                current_part += line + '\n'
        parts.append(current_part)
        
        for part in parts:
            update.message.reply_text(part, parse_mode='Markdown')
    else:
        update.message.reply_text(response, parse_mode='Markdown')

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    updater = Updater(token=BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("clear", clear_data))
    dp.add_handler(CommandHandler("report", show_report))
    dp.add_handler(MessageHandler(Filters.document, handle_document))
    dp.add_error_handler(error_handler)
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
