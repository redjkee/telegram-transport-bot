import os
import logging
import asyncio
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message
from openpyxl import load_workbook
import re
import tempfile
from collections import defaultdict

# HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is alive")
    
    def log_message(self, format, *args):
        pass

def run_http_server():
    server = HTTPServer(('0.0.0.0', 8080), HealthHandler)
    server.serve_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
http_thread = threading.Thread(target=run_http_server, daemon=True)
http_thread.start()

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv('BOT_TOKEN')
user_data_store = defaultdict(list)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

def find_table_structure(ws):
    headers_positions = {}
    for row in ws.iter_rows():
        for cell in row:
            if cell.value:
                cell_value = str(cell.value).strip()
                if "–¢–æ–≤–∞—Ä—ã (—Ä–∞–±–æ—Ç—ã, —É—Å–ª—É–≥–∏)" in cell_value:
                    headers_positions['description'] = (cell.row, cell.column)
                elif "–°—É–º–º–∞" in cell_value and cell_value != "–°—É–º–º–∞ —Å –ù–î–°":
                    headers_positions['amount'] = (cell.row, cell.column)
    return headers_positions

def extract_data_from_description(description):
    description_str = str(description)
    route = description_str.split(',')[0].strip()
    date_match = re.search(r'–æ—Ç\s+(\d{2}\.\d{2}\.\d{2})', description_str)
    date_str = date_match.group(1) if date_match else "–î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    plate_match = re.search(r'(\d{3})', description_str)
    car_plate = plate_match.group(1) if plate_match else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    driver_match = re.search(r',\s*([–ê-–Ø][–∞-—è]+)\s+[–ê-–Ø]\.[–ê-–Ø]\.', description_str)
    if driver_match:
        driver_name = driver_match.group(1)
    else:
        alt_driver_match = re.search(r',\s*([–ê-–Ø][–∞-—è]+)', description_str)
        driver_name = alt_driver_match.group(1) if alt_driver_match else "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    return route, date_str, car_plate, driver_name

def parse_invoice_file(file_path):
    try:
        wb = load_workbook(file_path, data_only=True)
        ws = wb.active
        headers = find_table_structure(ws)
        
        if not headers.get('description') or not headers.get('amount'):
            return []
        
        header_row = max(h[0] for h in headers.values())
        description_col = headers['description'][1]
        amount_col = headers['amount'][1]
        
        parsed_data = []
        row_num = header_row + 1
        current_empty_rows = 0
        max_empty_rows = 5
        
        while current_empty_rows < max_empty_rows:
            description_cell = ws.cell(row=row_num, column=description_col)
            description = description_cell.value
            
            if not description:
                current_empty_rows += 1
                row_num += 1
                continue
                
            current_empty_rows = 0
            description_str = str(description)
            
            if any(word in description_str.lower() for word in ['–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ', '–∏—Ç–æ–≥', '—Å—É–º–º–∞']):
                row_num += 1
                continue
            
            amount_cell = ws.cell(row=row_num, column=amount_col)
            amount = amount_cell.value
            
            if amount is not None:
                try:
                    if isinstance(amount, str) and any(char.isalpha() for char in amount.replace(' ', '').replace(',', '.')):
                        row_num += 1
                        continue
                    
                    amount_str = str(amount).replace(' ', '').replace(',', '.')
                    amount_value = float(amount_str)
                    
                    route, date_str, car_plate, driver_name = extract_data_from_description(description_str)
                    
                    if car_plate != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" and amount_value > 0:
                        parsed_data.append({
                            '–î–∞—Ç–∞': date_str,
                            '–ú–∞—Ä—à—Ä—É—Ç': route,
                            '–°—Ç–æ–∏–º–æ—Å—Ç—å': amount_value,
                            '–ì–æ—Å_–Ω–æ–º–µ—Ä': car_plate,
                            '–í–æ–¥–∏—Ç–µ–ª—å': driver_name,
                            '–§–∞–π–ª': os.path.basename(file_path)
                        })
                    
                except (ValueError, TypeError):
                    pass
            
            row_num += 1
            
            if row_num > header_row + 1000:
                break
        
        return parsed_data
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return []

def calculate_statistics(data):
    if not data:
        return None
    
    total_trips = len(data)
    total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in data)
    
    unique_cars = set(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'] for item in data)
    unique_drivers = set(item['–í–æ–¥–∏—Ç–µ–ª—å'] for item in data)
    unique_files = set(item['–§–∞–π–ª'] for item in data)
    
    car_stats = {}
    for item in data:
        car_plate = item['–ì–æ—Å_–Ω–æ–º–µ—Ä']
        if car_plate not in car_stats:
            car_stats[car_plate] = {
                'total_amount': 0,
                'trips_count': 0,
                'drivers': set(),
                'files': set()
            }
        
        car_stats[car_plate]['total_amount'] += item['–°—Ç–æ–∏–º–æ—Å—Ç—å']
        car_stats[car_plate]['trips_count'] += 1
        car_stats[car_plate]['drivers'].add(item['–í–æ–¥–∏—Ç–µ–ª—å'])
        car_stats[car_plate]['files'].add(item['–§–∞–π–ª'])
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
    driver_stats = {}
    for item in data:
        driver = item['–í–æ–¥–∏—Ç–µ–ª—å']
        if driver not in driver_stats:
            driver_stats[driver] = {
                'total_amount': 0,
                'trips_count': 0,
                'cars': set(),
                'files': set()
            }
        driver_stats[driver]['total_amount'] += item['–°—Ç–æ–∏–º–æ—Å—Ç—å']
        driver_stats[driver]['trips_count'] += 1
        driver_stats[driver]['cars'].add(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'])
        driver_stats[driver]['files'].add(item['–§–∞–π–ª'])
    
    return {
        'total_trips': total_trips,
        'total_amount': total_amount,
        'unique_cars': len(unique_cars),
        'unique_drivers': len(unique_drivers),
        'unique_files': len(unique_files),
        'car_stats': car_stats,
        'driver_stats': driver_stats
    }

def calculate_file_statistics(file_data):
    if not file_data:
        return None
    
    total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in file_data)
    trips_count = len(file_data)
    
    return {
        'total_amount': total_amount,
        'trips_count': trips_count
    }

@dp.message(Command("start"))
async def start_handler(message: Message):
    welcome_text = """
üöõ Transport Analytics Bot

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Excel —Ñ–∞–π–ª—ã —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏, –∏ —è:
‚Ä¢ –°–æ–±–µ—Ä—É –¥–∞–Ω–Ω—ã–µ –∏–∑ –í–°–ï–• —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ü–æ–∫–∞–∂—É —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º –∏ –≤–æ–¥–∏—Ç–µ–ª—è–º
‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–±—â–∏–π –æ—Ç—á–µ—Ç

üìä –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:

/report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (–∞–≤—Ç–æ + –≤–æ–¥–∏—Ç–µ–ª–∏)
/cars - –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º  
/drivers - –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
/clear - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

üîç –ü–û–ò–°–ö:
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 302) –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

üìÅ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .xlsx, .xls

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤!
    """
    await message.answer(welcome_text)

@dp.message(Command("clear"))
async def clear_handler(message: Message):
    user_id = message.from_user.id
    user_data_store[user_id] = []
    await message.answer("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã! –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.")

@dp.message(Command("report"))
async def report_handler(message: Message):
    user_id = message.from_user.id
    user_data = user_data_store[user_id]
    
    if not user_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    await generate_report(message, user_data, "–ü–û–õ–ù–´–ô –û–¢–ß–ï–¢")

@dp.message(Command("cars"))
async def cars_handler(message: Message):
    """–û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º"""
    user_id = message.from_user.id
    user_data = user_data_store[user_id]
    
    if not user_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    stats = calculate_statistics(user_data)
    
    car_reports = []
    for car_plate, car_data in stats['car_stats'].items():
        drivers = ', '.join(car_data['drivers'])
        files = ', '.join(list(car_data['files'])[:3])
        if len(car_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(car_data['files']) - 3})"
        
        car_reports.append(f"üöó {car_plate}\n"
                         f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {car_data['trips_count']}\n"
                         f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: {drivers}\n"
                         f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                         f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {car_data['total_amount']:,.0f} —Ä—É–±.\n")
    
    response = f"""
üìä –û–¢–ß–ï–¢ –ü–û –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú

–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {stats['unique_cars']}
–û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} —Ä—É–±.

{chr(10).join(car_reports)}
    """
    
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
            await asyncio.sleep(0.5)
    else:
        await message.answer(response)

@dp.message(Command("drivers"))
async def drivers_handler(message: Message):
    """–û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º"""
    user_id = message.from_user.id
    user_data = user_data_store[user_id]
    
    if not user_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    stats = calculate_statistics(user_data)
    
    driver_reports = []
    for driver, driver_data in stats['driver_stats'].items():
        if driver == "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            continue
        cars = ', '.join(driver_data['cars'])
        files = ', '.join(list(driver_data['files'])[:3])
        if len(driver_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(driver_data['files']) - 3})"
        
        driver_reports.append(f"üë§ {driver}\n"
                            f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {driver_data['trips_count']}\n"
                            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏: {cars}\n"
                            f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {driver_data['total_amount']:,.0f} —Ä—É–±.\n")
    
    response = f"""
üìä –û–¢–ß–ï–¢ –ü–û –í–û–î–ò–¢–ï–õ–Ø–ú

–í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len([d for d in stats['driver_stats'].keys() if d != "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"])}
–û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} —Ä—É–±.

{chr(10).join(driver_reports)}
    """
    
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
            await asyncio.sleep(0.5)
    else:
        await message.answer(response)

@dp.message(F.document)
async def document_handler(message: Message):
    try:
        user_id = message.from_user.id
        document = message.document
        
        if not (document.file_name.endswith('.xlsx') or document.file_name.endswith('.xls')):
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)")
            return
        
        await message.answer(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {document.file_name}")
        
        file = await bot.get_file(document.file_id)
        file_path = f"/tmp/{document.file_name}"
        await bot.download_file(file.file_path, file_path)
        
        file_data = parse_invoice_file(file_path)
        
        if not file_data:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            return
        
        user_data_store[user_id].extend(file_data)
        
        file_stats = calculate_file_statistics(file_data)
        user_data = user_data_store[user_id]
        all_stats = calculate_statistics(user_data)
        
        response = f"""
üìÑ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {document.file_name}

–î–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞:
‚Ä¢ –ü–æ–µ–∑–¥–æ–∫ –≤ —Ñ–∞–π–ª–µ: {file_stats['trips_count']}
‚Ä¢ –°—É–º–º–∞ –≤ —Ñ–∞–π–ª–µ: {file_stats['total_amount']:,.0f} —Ä—É–±.

–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –§–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {all_stats['unique_files']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {all_stats['total_trips']}
‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {all_stats['unique_cars']}
‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π: {all_stats['unique_drivers']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {all_stats['total_amount']:,.0f} —Ä—É–±.

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/report - –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
/cars - –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º  
/drivers - –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º
        """
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")

async def generate_report(message: Message, data, title):
    if not data:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞")
        return
    
    stats = calculate_statistics(data)
    
    car_reports = []
    for car_plate, car_data in stats['car_stats'].items():
        drivers = ', '.join(car_data['drivers'])
        files = ', '.join(list(car_data['files'])[:3])
        if len(car_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(car_data['files']) - 3})"
        
        car_reports.append(f"üöó {car_plate}\n"
                         f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {car_data['trips_count']}\n"
                         f"‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: {drivers}\n"
                         f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                         f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {car_data['total_amount']:,.0f} —Ä—É–±.")
    
    driver_reports = []
    for driver, driver_data in stats['driver_stats'].items():
        if driver == "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞":
            continue
        cars = ', '.join(driver_data['cars'])
        files = ', '.join(list(driver_data['files'])[:3])
        if len(driver_data['files']) > 3:
            files += f" ... (–µ—â–µ {len(driver_data['files']) - 3})"
        
        driver_reports.append(f"üë§ {driver}\n"
                            f"‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {driver_data['trips_count']}\n"
                            f"‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏: {cars}\n"
                            f"‚Ä¢ –§–∞–π–ª—ã: {files}\n"
                            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {driver_data['total_amount']:,.0f} —Ä—É–±.")
    
    response = f"""
üìä {title}

–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['unique_files']}
‚Ä¢ –í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {stats['total_trips']}
‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {stats['unique_cars']}  
‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–µ–π: {stats['unique_drivers']}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.0f} —Ä—É–±.

–ü–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º:
{chr(10).join(car_reports)}

–ü–æ –≤–æ–¥–∏—Ç–µ–ª—è–º:
{chr(10).join(driver_reports)}

‚úÖ –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω!
    """
    
    if len(response) > 4000:
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for part in parts:
            await message.answer(part)
            await asyncio.sleep(0.5)
    else:
        await message.answer(response)

@dp.message()
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º"""
    user_id = message.from_user.id
    user_data = user_data_store[user_id]
    
    if not user_data:
        await message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    search_text = message.text.strip()
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏)
    if search_text.startswith('/'):
        return
    
    # –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (—Ü–∏—Ñ—Ä—ã)
    if search_text.isdigit():
        car_results = [item for item in user_data if search_text in item['–ì–æ—Å_–Ω–æ–º–µ—Ä']]
        
        if car_results:
            car_plates = set(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'] for item in car_results)
            total_trips = len(car_results)
            total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in car_results)
            drivers = set(item['–í–æ–¥–∏—Ç–µ–ª—å'] for item in car_results if item['–í–æ–¥–∏—Ç–µ–ª—å'] != "–§–∞–º–∏–ª–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            files = set(item['–§–∞–π–ª'] for item in car_results)
            
            response = f"""
üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ü–û –ê–í–¢–û–ú–û–ë–ò–õ–Æ: {search_text}

–ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(car_plates)}
‚Ä¢ –ù–æ–º–µ—Ä–∞: {', '.join(car_plates)}
‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {total_trips}
‚Ä¢ –í–æ–¥–∏—Ç–µ–ª–∏: {', '.join(drivers) if drivers else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
‚Ä¢ –§–∞–π–ª–æ–≤: {len(files)}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.0f} —Ä—É–±.

–î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–æ–∫:
"""
            
            for i, item in enumerate(car_results[:10], 1):
                response += f"\n{i}. {item['–î–∞—Ç–∞']} - {item['–í–æ–¥–∏—Ç–µ–ª—å']} - {item['–°—Ç–æ–∏–º–æ—Å—Ç—å']:,.0f} —Ä—É–±. ({item['–ú–∞—Ä—à—Ä—É—Ç']})"
            
            if len(car_results) > 10:
                response += f"\n\n... –∏ –µ—â–µ {len(car_results) - 10} –ø–æ–µ–∑–¥–æ–∫"
                
            await message.answer(response)
        else:
            await message.answer(f"‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–æ–º–µ—Ä–æ–º '{search_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–∏—Å–∫ –ø–æ —Ñ–∞–º–∏–ª–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è (—Ç–µ–∫—Å—Ç)
    else:
        driver_results = [item for item in user_data if search_text.lower() in item['–í–æ–¥–∏—Ç–µ–ª—å'].lower()]
        
        if driver_results:
            drivers_found = set(item['–í–æ–¥–∏—Ç–µ–ª—å'] for item in driver_results)
            total_trips = len(driver_results)
            total_amount = sum(item['–°—Ç–æ–∏–º–æ—Å—Ç—å'] for item in driver_results)
            cars = set(item['–ì–æ—Å_–Ω–æ–º–µ—Ä'] for item in driver_results)
            files = set(item['–§–∞–π–ª'] for item in driver_results)
            
            response = f"""
üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ü–û –í–û–î–ò–¢–ï–õ–Æ: {search_text}

–ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(drivers_found)}
‚Ä¢ –§–∞–º–∏–ª–∏–∏: {', '.join(drivers_found)}
‚Ä¢ –ü–æ–µ–∑–¥–æ–∫: {total_trips}
‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª–∏: {', '.join(cars)}
‚Ä¢ –§–∞–π–ª–æ–≤: {len(files)}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.0f} —Ä—É–±.

–î–µ—Ç–∞–ª–∏ –ø–æ–µ–∑–¥–æ–∫:
"""
            
            for i, item in enumerate(driver_results[:10], 1):
                response += f"\n{i}. {item['–î–∞—Ç–∞']} - {item['–ì–æ—Å_–Ω–æ–º–µ—Ä']} - {item['–°—Ç–æ–∏–º–æ—Å—Ç—å']:,.0f} —Ä—É–±. ({item['–ú–∞—Ä—à—Ä—É—Ç']})"
            
            if len(driver_results) > 10:
                response += f"\n\n... –∏ –µ—â–µ {len(driver_results) - 10} –ø–æ–µ–∑–¥–æ–∫"
                
            await message.answer(response)
        else:
            await message.answer(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å '{search_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
