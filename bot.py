
import os
import logging
import pandas as pd
import io # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏ –≤ –ø–∞–º—è—Ç–∏
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, 
    ContextTypes, 
    CommandHandler, 
    MessageHandler, 
    filters,
    CallbackQueryHandler
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
from parser import process_excel_file

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ {user_id: DataFrame}
user_data = {}

# --- –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]

    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [
            InlineKeyboardButton("üèÜ –¢–æ–ø-5", callback_data='top'),
            InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data='export')
        ],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data='clear')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
        
    await update.message.reply_text(
        (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–µ–∑–¥–æ–∫.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ Excel-—Ñ–∞–π–ª–æ–≤ (.xlsx) —Å –æ—Ç—á–µ—Ç–∞–º–∏. "
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
            "–¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:\n"
            "üöó `/car [–Ω–æ–º–µ—Ä]` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—à–∏–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/car 123`)\n"
            "üë§ `/driver [—Ñ–∞–º–∏–ª–∏—è]` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/driver –∏–≤–∞–Ω–æ–≤`)"
        ),
        reply_markup=reply_markup
    )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    file = await update.message.document.get_file()
    file_name = update.message.document.file_name

    if not file_name.lower().endswith('.xlsx'):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx")
        return

    await update.message.reply_text(f"‚è≥ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{file_name}'. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    file_content = await file.download_as_bytearray()
    new_df = process_excel_file(bytes(file_content), file_name)

    if new_df is None or new_df.empty:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ '{file_name}'.")
        return

    if user_id in user_data:
        user_data[user_id] = pd.concat([user_data[user_id], new_df], ignore_index=True)
    else:
        user_data[user_id] = new_df
    
    total_rows = len(user_data[user_id])
    
    await update.message.reply_text(
        f"‚úÖ –§–∞–π–ª '{file_name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
        f"–î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(new_df)}\n"
        f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {total_rows}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Ç–æ–≥–æ–≤."
    )

# --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–û–ö ---
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏

    command = query.data
    if command == 'stats':
        await show_stats(query, context, is_callback=True)
    elif command == 'clear':
        await clear(query, context, is_callback=True)
    elif command == 'top':
        await show_top_stats(query, context, is_callback=True)
    elif command == 'export':
        await export_data(query, context, is_callback=True)

# --- –§–£–ù–ö–¶–ò–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏) ---

async def show_stats(update_or_query, context: ContextTypes.DEFAULT_TYPE, is_callback=False):
    user_id = update_or_query.from_user.id
    chat_id = update_or_query.effective_chat.id
    
    if user_id not in user_data or user_data[user_id].empty:
        await context.bot.send_message(chat_id, "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã.")
        return
    
    df = user_data[user_id]
    total_trips = len(df)
    total_earnings = df['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum()
    unique_cars_count = df['–ì–æ—Å_–Ω–æ–º–µ—Ä'].nunique()
    unique_drivers_count = df['–í–æ–¥–∏—Ç–µ–ª—å'].nunique()
    unique_files_count = df['–ò—Å—Ç–æ—á–Ω–∏–∫'].nunique()

    message = (
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"‚ñ´Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {unique_files_count}\n"
        f"‚ñ´Ô∏è –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total_trips}\n"
        f"‚ñ´Ô∏è –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: *{total_earnings:,.2f} —Ä—É–±.*\n"
        f"‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω: {unique_cars_count}\n"
        f"‚ñ´Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: {unique_drivers_count}"
    )
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–ª–±—ç–∫ –æ—Ç –∫–Ω–æ–ø–∫–∏, —Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if is_callback:
        await update_or_query.edit_message_text(text=message, parse_mode='Markdown')
    else:
        await context.bot.send_message(chat_id, text=message, parse_mode='Markdown')

async def clear(update_or_query, context: ContextTypes.DEFAULT_TYPE, is_callback=False):
    user_id = update_or_query.from_user.id
    chat_id = update_or_query.effective_chat.id

    if user_id in user_data:
        del user_data[user_id]
        message = "üóëÔ∏è –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
    else:
        message = "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–∏—Å—Ç–∫–∏."

    if is_callback:
        await update_or_query.edit_message_text(text=message)
    else:
        await context.bot.send_message(chat_id, text=message)

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---

async def show_top_stats(update_or_query, context: ContextTypes.DEFAULT_TYPE, is_callback=False):
    user_id = update_or_query.from_user.id
    chat_id = update_or_query.effective_chat.id

    if user_id not in user_data or user_data[user_id].empty:
        await context.bot.send_message(chat_id, "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    df = user_data[user_id]
    
    # –¢–æ–ø 5 –≤–æ–¥–∏—Ç–µ–ª–µ–π
    top_drivers = df.groupby('–í–æ–¥–∏—Ç–µ–ª—å')['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum().nlargest(5)
    top_drivers_text = ""
    for i, (driver, total) in enumerate(top_drivers.items(), 1):
        top_drivers_text += f"{i}. {driver} - {total:,.0f} —Ä—É–±.\n"
        
    # –¢–æ–ø 5 –º–∞—à–∏–Ω
    top_cars = df.groupby('–ì–æ—Å_–Ω–æ–º–µ—Ä')['–°—Ç–æ–∏–º–æ—Å—Ç—å'].sum().nlargest(5)
    top_cars_text = ""
    for i, (car, total) in enumerate(top_cars.items(), 1):
        top_cars_text += f"{i}. –ù–æ–º–µ—Ä {car} - {total:,.0f} —Ä—É–±.\n"

    message = (
        f"üèÜ *–¢–æ–ø-5 –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É*\n\n"
        f"üë§ *–õ—É—á—à–∏–µ –≤–æ–¥–∏—Ç–µ–ª–∏:*\n{top_drivers_text}\n"
        f"üöó *–°–∞–º—ã–µ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã:*\n{top_cars_text}"
    )
    
    if is_callback:
        await update_or_query.edit_message_text(text=message, parse_mode='Markdown')
    else:
        await context.bot.send_message(chat_id, text=message, parse_mode='Markdown')
        
async def export_data(update_or_query, context: ContextTypes.DEFAULT_TYPE, is_callback=False):
    user_id = update_or_query.from_user.id
    chat_id = update_or_query.effective_chat.id

    if user_id not in user_data or user_data[user_id].empty:
        await context.bot.send_message(chat_id, "‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return
        
    df = user_data[user_id]
    
    # –°–æ–∑–¥–∞–µ–º Excel-—Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç')
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        worksheet = writer.sheets['–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç']
        for idx, col in enumerate(df):
            series = df[col]
            max_len = max((
                series.astype(str).map(len).max(),
                len(str(series.name))
            )) + 1
            worksheet.set_column(idx, idx, max_len)

    output.seek(0)
    
    await context.bot.send_document(
        chat_id=chat_id, 
        document=output, 
        filename='—Å–≤–æ–¥–Ω—ã–π_–æ—Ç—á–µ—Ç.xlsx',
        caption='üìä –í–∞—à —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º.'
    )

# --- –ö–û–ú–ê–ù–î–´ –ü–û–ò–°–ö–ê ---

async def car_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≠—Ç–∞ –∏ —Å–ª–µ–¥—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —Ç—Ä–µ–±—É—é—Ç –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ...

async def driver_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ...
# (–ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏–π car_stats –∏ driver_stats –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
# –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏—Ö —Å—é–¥–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞, –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ö–æ—Ä–æ—à–æ.

if __name__ == '__main__':
    TOKEN = os.getenv('TELEGRAM_TOKEN')
    if not TOKEN:
        raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")

    application = ApplicationBuilder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('stats', show_stats))
    application.add_handler(CommandHandler('clear', clear))
    application.add_handler(CommandHandler('top', show_top_stats))
    application.add_handler(CommandHandler('export', export_data))
    application.add_handler(CommandHandler('car', car_stats))
    application.add_handler(CommandHandler('driver', driver_stats))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

